/* 
	为什么浏览器和Node要设计EventLoop事件循环系统呢？
	原因就在于在执行JS的时候，不仅仅只是同步的代码，还有异步的代码，是为了实现JS中异步的概念而设计的
	我们经常说的JS是单线程的指的是JS的主线程是单线程的，其实setTimeout、Ajax异步请求都是在非主线程上执行的，并不会阻塞主线程的执行
 
	1. 浏览器是多个进程组成的，里面包含了浏览器主进程、多个渲染进程(以打开标签页的数量计算)、GPU进程、网络进程、插件进程等
	2. 每一个标签页都有一个独立的渲染进程，为了避免一个页面加载失败整个浏览器卡死的情况
	3. 每一个渲染进程中又包含多个线程，包括以下几个线程：
		+ 负责渲染UI页面的GUI渲染线程
		+ 负责执行JS代码的JS引擎线程
		+ 用来调度管理JS异步方法谁先执行谁后执行的 EventLoop事件循环线程
		+ 事件click、setTimeout、ajax等线程
	4. 需要注意的是渲染进程中的GUI渲染线程和JS引擎线程是互斥的，也就是页面渲染的时候不执行JS代码，执行JS代码的时候不渲染页面
	
 */


/* 
	EventLoop解决了那些问题？
	JS执行时可能会调用异步方法，那么这些异步方法谁先执行谁后执行，这个就要靠EventLoop来实现
 
 */